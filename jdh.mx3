// Simulate motion of a domain wall in 2D.

// Set up simulation; tuning parameters
sim_time := 1000e-9
r := 0.01
nx := 256
ny := 512
nz := 1
dx := 2e-9
dy := 2e-9
dz := 0.5e-9
Dind = 0.0              // [J/m^2] Interfacial DMI constant
Dbulk = 0.0             // [J/m^2] Bulk DMI constant
setGridSize(nx, ny, nz) // Size along y-direction is 1, since the wall is uniform
setCellSize(dx, dy, dz)
setPBC(0, 2, 0)

// Material parameters with _ are varied across each grain to simulate pinning sites
Msat_ := 837e3
Ku1_ := 0.5e6
// alpha = 1

// Msat_ := 9.1e5 // [A/m] Average saturation magnetization
// Ku1_ := 8.4e5  // [J/m^3] Average anisotropy constant

// Fixed material parameters
Aex = 1e-11           // [J/m] Exchange stiffness
anisU = Vector(0, 0, 1) // Uniaxial anisotropy direction
alpha = 0.27            // Gilbert damping parameter

// Additional parameters
h := 0.5                           // [nm] Mean thickness of the sample
K0 := Ku1_ - 0.5*mu0*pow(Msat_, 2) // Effective anisotropy constant, corrected for demag energy

// Print initial information
print("Nominal domain wall width: sqrt(Aex/K0) = ", sqrt(Aex.average()/abs(K0)), " nm")

// Make 20 nm grains
ext_makegrains(20e-9, 255, 123)
for i := 0; i < 255; i++ {
	tG := h * (randNorm()*r + 1)  // Effective grain thickness
	Ku1.setRegion(i, Ku1_*h/tG)   // Grain anisotropy
	Msat.setRegion(i, Msat_*tG/h) // Grain saturation magnetization
}

// Set up bloch-type domain wall, with the wall magnetization pointing along (0, 1, 0), the +y direction
m = twoDomain(0, 0, 1, 0, 1, 0, 0, 0, -1)
shiftmagl = vector(0, 0, 1)
shiftmagr = vector(0, 0, -1)
shift(-100)
// m = twoDomainBlochLines(0, 0, 1, 0, 0, -1)
relax()

// Set up data output
tableAdd(B_ext)
tableAdd(E_anis)
tableAdd(E_demag)
tableAdd(E_exch)
tableAdd(E_total)
tableAdd(E_Zeeman)
tableAdd(MaxAngle)
autosave(m, 200e-12)
tableautosave(10e-12)

B := 10e-3 // [T] Field strength
B_ext = vector(0, 0, B)

wall_start := now()

for i := sim_time; i > 0; i -= 1e-9 {
	run(1e-9)
	print(sprintf("Simulation time remaining: %2.2e s | Time remaining: %2.2f m", i, i*since(wall_start).minutes()/(sim_time - i)))
}

save(m)
save(regions)

print("Total number of steps: ", step)
print("Total simulation time: ", since(wall_start).minutes())
